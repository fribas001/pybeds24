import time
import json
import requests
import random
import re
import calendar
import pandas

#from bs4 import BeautifulSoup
from collections import defaultdict
from random import randrange

from googleapiclient.discovery import build
from google.oauth2 import service_account

from datetime import datetime
from datetime import timedelta, date

def Beds24_id_list():
    
    Airbnb_id_list = []
    
    #REQUEST PROPERTIES #################
    
    payload = {"authentication": {"apiKey": "131736176316351563"}}
    
    URL_properties = "https://www.beds24.com/api/json/getProperties"
    
    r = requests.post(URL_properties, json=payload)
    res = r.json()
    
    print(len(res["getProperties"]))
                
    for b in range(0,len(res["getProperties"])):
        
        name = res["getProperties"][b]["name"]  
        propId = res["getProperties"][b]["propId"]
    
        #REQUEST DETAILS #################
        
        propKey = str(propId)*3
        RoomID = res["getProperties"][b]["roomTypes"][0]['roomId']
        
        payload_Details = {
        "authentication": {"apiKey":"131736176316351563","propKey":propKey},
        "bookingData": True,
        "images": True,
        "roomIds": True,
        "texts": True,
        "includeAirbnb": True,
        "includeVrbo": True
        }
                        
        url_Details = "https://www.beds24.com/api/json/getPropertyContent"
        r_Details = requests.post(url_Details, json=payload_Details)
        res_Details = r_Details.json()
        
        #print(res_Details)
        #print(RoomID)
        
        Airbnb_ID = str(res_Details["getPropertyContent"][0]["roomIds"][str(RoomID)]['airbnb']['listingId'])
        
        row = [name,Airbnb_ID]
            
        Airbnb_id_list.append(row)
        time.sleep (0.5)
        
    print(Airbnb_id_list)
    return Airbnb_id_list
        


def Airbnb_anuncios():
    
    SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
    SERVICE_ACCOUNT_FILE = 'credentials.json'

    creds = None
    creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)

    # If modifying these scopes, delete the file token.json.

    # The ID and range of a sample spreadsheet.
    SAMPLE_SPREADSHEET_ID = '1zHh3xX897i68kXQmaPunGT7PGf6_ape3rTmqXiMNPt8'

    service = build('sheets', 'v4', credentials=creds)

    # Call the Sheets API
    sheet = service.spreadsheets().values()
    
    ##################
    
    result_propriedades = sheet.get(spreadsheetId=SAMPLE_SPREADSHEET_ID,range="ANUNCIOS!A2:D").execute()
    values_propriedades = result_propriedades.get('values', [])
    propriedades_list = [item for sublist in values_propriedades for item in sublist]
    
    ################# GET BEDS 24 LIST
    
    Airbnb_id_list = Beds24_id_list()
    
    ##################
    
    Offset = str(0)
    Limit = str(300)
    Url_anuncios = "https://www.airbnb.pt/api/v3/BeehiveGetListingsQuery?operationName=BeehiveGetListingsQuery&locale=pt-PT&currency=EUR&_cb=0468w8e1xnq8dk0ocqnh813p989c&variables=%7B%22request%22%3A%7B%22query%22%3Anull%2C%22querySet%22%3Anull%2C%22limit%22%3A"+Limit+"%2C%22offset%22%3A"+Offset+"%2C%22orderBys%22%3Anull%2C%22filters%22%3A%7B%22amenityIds%22%3Anull%2C%22bathrooms%22%3Anull%2C%22beds%22%3Anull%2C%22bedrooms%22%3Anull%2C%22instantBook%22%3Anull%2C%22statuses%22%3Anull%2C%22pttAllowed%22%3Anull%2C%22vlsVerificationRequired%22%3Anull%7D%7D%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%2280f49ac0ba3eb4789456f0049e682c1f08d863025bbf0f6efa02dd25bb9b874c%22%7D%7D"  
    
    COOKIE = "bev=1643884365_YTgwYjRiMDMzNzY3; abb_fa2=%7B%22user_id%22%3A%2262%7C1%7CpQz2tR5sS36c7kUO9ppET3bcui%2BYLp3vi64xhmCs37Na%2FwYnxvp6Mg%3D%3D%22%7D; everest_cookie=1664025056.cGmmxsDJQwOfADQGg3YC.8jwH4zjwOvXciCMjoHh6_zfdPeVZ26YZbaHKi-mnHCw; jitney_client_session_id=e0bbac1b-8aa5-4880-a293-0ae760d8a258; jitney_client_session_created_at=1664186552; bm_sz=B243E3A440215F82C3DFEFED90B92194~YAAQZx0SAhZEUV+DAQAAd5I/eRFVsOvj6kAONG7hMe2SrydL7mKwGNIJI1C3yPc+WNngHqyqN848rIQJT12JQXCDfYEWRxKUmdli8NZwf6oCqzj2phcGWCBIzUDOPaHlHYqnRLMviGLOAKeQlRbXP1iG558E9s9aVvMDp7LYz26nG98tTq8sFWYyuP7J2wCHizkSdshtvDVUQy2TuRg7qid/vqb2f/INB81gFfclSk9rOT5Ocrg5684ICsSNwKNCwLgcRxNFp62aTf0lJkHKafki8MB73BwlwBU31/YsKPhC+g==~3163446~4407864; auth_jitney_session_id=2d319480-eae8-4a53-aa40-8e27848a8d78; _csrf_token=V4%24.airbnb.pt%242MmAu1OXK9U%24-7QyP8sKi5ysK9Frea7gcBMcnnu4MbPbXHiPZbK6Gq4%3D; _aat=0%7CVYkK386nDZ5amvtmk9jb436YYqRHGajBNHEBxvQKPPP4WauKekRsP3DGvnFCWJon; _airbed_session_id=6b8745f87dbb26a39673f06950619ee7; _abck=B6ABC5D4817D32D3713AB96E0B9DCA13~0~YAAQZx0SAtJIUV+DAQAA7WNAeQhuINAtzFrFjLBcCCJFTFT29BT1hxas1pyH3nRw2KLIAx/ffsjey43pt/kRkkv7JKnuYIJ0CBDE1LuUUfTuCcIG+qf0cHPe7YDt4nqNPxIAJPd54yJVHOZR0MKR2kOEAhfohmaAk75RzOi1ulYMkjj63WRjtT/qC33ZXn23dAygS4BjFikNiMzPLp8O33h+lG3+o8IJl/8Elw6lK17lvJu8NXuaILYtoy6AiHozThIN+DCOlwcQRvIIgAMpFTGUDbM6zEIteI70VnYoLR/SXJDWMKqcASI0meHmEuiLIlIeflne0GuVhYluLIIzsF7hVbdcLH8rR6IaZIrw7XUDU/c5KdZKWdnB1GL5OBVL7j1htTkxpzm2SXA=~-1~-1~-1; hli=1; roles=0; cfrmfctr=MOBILE; frmfctr=compact; previousTab=%7B%22id%22%3A%229a48c315-fa6d-4a50-8c03-dcf452ca4c10%22%2C%22url%22%3A%22https%3A%2F%2Fwww.airbnb.pt%2Fhosting%2Finbox%2Ffolder%2Fall%2Fthread%2F1285873637%2Fdetails%22%7D; jitney_client_session_updated_at=1664186651; _user_attributes=%7B%22curr%22%3A%22EUR%22%2C%22guest_exchange%22%3A1.03188%2C%22device_profiling_session_id%22%3A%221659361079--f061de273c42d192a5a2907f%22%2C%22giftcard_profiling_session_id%22%3A%221664186558--7eaaed56f797da0180c67801%22%2C%22reservation_profiling_session_id%22%3A%221664186558--fde1b514743e3f990009abf6%22%2C%22id%22%3A12730028%2C%22hash_user_id%22%3A%2293998f349577ef3ca721456b92b2c9bb41255ac6%22%2C%22eid%22%3A%22VVfHemHC8nXnA-39TZNJiQ%3D%3D%22%2C%22num_h%22%3A208%2C%22num_trip_notif%22%3A0%2C%22name%22%3A%22Host+Wise%22%2C%22num_action%22%3A0%2C%22is_admin%22%3Afalse%2C%22can_access_photography%22%3Afalse%2C%22travel_credit_status%22%3Anull%2C%22referrals_info%22%3A%7B%22receiver_max_savings%22%3Anull%2C%22receiver_savings_percent%22%3Anull%2C%22receiver_signup%22%3Anull%2C%22referrer_guest%22%3A%22%E2%82%AC15%22%2C%22terms_and_conditions_link%22%3A%22%2Fhelp%2Farticle%2F2269%22%2C%22wechat_link%22%3Anull%2C%22offer_discount_type%22%3Anull%7D%7D; flags=1187840"
        
    header = {     
            "path": "/api/v3/ReviewDetailsQuery?operationName=ReviewDetailsQuery&locale=pt-PT&currency=EUR&variables=%7B%22input%22%3A%7B%22revieweeId%22%3A12730028%2C%22reviewId%22%3A%22637550451162268515%22%2C%22role%22%3A%22guest%22%7D%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%222f462b53ce06324e99c484fede4d74fe81412642b0c680df800d504305fdaa3a%22%7D%7D",
            "scheme": "https",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "en-US,en;q=0.9,pt;q=0.8,es;q=0.7",
            "content-type": "application/json",
            "cookie": COOKIE,
            "device-memory": str(8),
            "dpr": str(2),
            "ect": "4g",
            "referer": "https://www.airbnb.pt/performance/quality/cleanliness/reviews/review/637550451162268515",
            "sec-ch-ua": '" Not A;Brand";v="99", "Chromium";v="101", "Google Chrome";v="101"',
            "sec-ch-ua-mobile": "?1",
            "sec-ch-ua-platform": "Android",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "user-agent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Mobile Safari/537.36",
            "viewport-width": "885",
            "x-airbnb-api-key": "d306zoyjsyarp7ifhu67rjxn52tv0t20",
            "x-airbnb-graphql-platform": "web",
            "x-airbnb-graphql-platform-client": "airbnb-apollo",
            "x-csrf-token": "V4$.airbnb.pt$9QYe7vfJPlY$bzajVoK8zRxYmXRy8psmav6CLNPucdxV4V2lJjQG_Pw=",
            "x-csrf-without-token": str(1),
            "x-trc-v3-kraken": str(1)
            }
    
    r = requests.get(Url_anuncios, headers = header)
    print(r.status_code)
    
    myObj = r.json() 
    #print(myObj)
    
    ############################ GET RATING LIST
    
    Key = "d306zoyjsyarp7ifhu67rjxn52tv0t20"
    UserID = str(12730028)
    Url_ratings = "https://www.airbnb.pt/api/v2/user_promo_listings?_limit="+"300"+"&_offset="+"0"+"&currency=EUR&key="+Key+"&locale=pt&user_id="+UserID

    r_ratings = requests.get(Url_ratings, headers = header)
    
    myObj_ratings = r_ratings.json() 

    ################
    
    qta_anuncios = len(myObj["data"]["beehive"]["getListings"]["listings"])
    
    Post_array = []
    
    for a in range(0,qta_anuncios):
        
        apiCategory = myObj["data"]["beehive"]["getListings"]["listings"][a]["apiCategory"]
        apiState = myObj["data"]["beehive"]["getListings"]["listings"][a]["apiState"]
        apiStatus = myObj["data"]["beehive"]["getListings"]["listings"][a]["apiStatus"]
        bathrooms = myObj["data"]["beehive"]["getListings"]["listings"][a]["bathrooms"]
        bedrooms = myObj["data"]["beehive"]["getListings"]["listings"][a]["bedrooms"]
        beds = myObj["data"]["beehive"]["getListings"]["listings"][a]["beds"]
        canAddTax = myObj["data"]["beehive"]["getListings"]["listings"][a]["canAddTax"]
        canFinish = myObj["data"]["beehive"]["getListings"]["listings"][a]["canFinish"]
        canList = myObj["data"]["beehive"]["getListings"]["listings"][a]["canList"]
        canPublish = myObj["data"]["beehive"]["getListings"]["listings"][a]["canPublish"]
        canReactivate = myObj["data"]["beehive"]["getListings"]["listings"][a]["canReactivate"]
        canUpdateHierarchy = myObj["data"]["beehive"]["getListings"]["listings"][a]["canUpdateHierarchy"]
        hasPassthroughTaxes = myObj["data"]["beehive"]["getListings"]["listings"][a]["hasPassthroughTaxes"]
        hostMypPath = myObj["data"]["beehive"]["getListings"]["listings"][a]["hostMypPath"]
        id = myObj["data"]["beehive"]["getListings"]["listings"][a]["id"]
        instantBook = myObj["data"]["beehive"]["getListings"]["listings"][a]["instantBook"]
        isLux = myObj["data"]["beehive"]["getListings"]["listings"][a]["isLux"]
        isLvfRequired = myObj["data"]["beehive"]["getListings"]["listings"][a]["isLvfRequired"]
        isOwner = myObj["data"]["beehive"]["getListings"]["listings"][a]["isOwner"]
        isPlus = myObj["data"]["beehive"]["getListings"]["listings"][a]["isPlus"]
        isThReviewRejected = myObj["data"]["beehive"]["getListings"]["listings"][a]["isThReviewRejected"]
        listingObjType = myObj["data"]["beehive"]["getListings"]["listings"][a]["listingObjType"]
        location = myObj["data"]["beehive"]["getListings"]["listings"][a]["location"]
        modified = myObj["data"]["beehive"]["getListings"]["listings"][a]["modified"]
        name = myObj["data"]["beehive"]["getListings"]["listings"][a]["name"]
        needsSafetyInfo = myObj["data"]["beehive"]["getListings"]["listings"][a]["needsSafetyInfo"]
        nickname = myObj["data"]["beehive"]["getListings"]["listings"][a]["nickname"]
        nightCount = myObj["data"]["beehive"]["getListings"]["listings"][a]["nightCount"]
        ownerName = myObj["data"]["beehive"]["getListings"]["listings"][a]["ownerName"]
        plusProgress = myObj["data"]["beehive"]["getListings"]["listings"][a]["plusProgress"]
        status = myObj["data"]["beehive"]["getListings"]["listings"][a]["status"]
        statusContext = myObj["data"]["beehive"]["getListings"]["listings"][a]["statusContext"]
        thumbnailUrl = myObj["data"]["beehive"]["getListings"]["listings"][a]["thumbnailUrl"]
        verificationDueDate = myObj["data"]["beehive"]["getListings"]["listings"][a]["verificationDueDate"]
        
        ratings = ""
        number_reviews = ""
        
        for l in myObj_ratings["user_promo_listings"]:
            if str(l["id"]) == id:
                ratings = l["star_rating"]
                number_reviews = l["visible_review_count"]
        
        for x in Airbnb_id_list:
            if x[1] == str(id):
                name = x[0]
        
    
        
        ROW =[
        id,
        nickname,
        name,
        hostMypPath,
        location,
        bathrooms,
        bedrooms,
        beds,
        modified,
        status,
        ratings,
        number_reviews,
        thumbnailUrl
        #needsSafetyInfo,
        #nightCount,
        #ownerName,
        #plusProgress,
        #statusContext,
        #verificationDueDate
        #apiCategory,
        #apiState,
        #apiStatus,
        #canAddTax,
        #canFinish,
        #canList,
        #canPublish,
        #canReactivate,
        #canUpdateHierarchy,
        #hasPassthroughTaxes,
        #instantBook,
        #isLux,
        #isLvfRequired,
        #isOwner,
        #isPlus,
        #isThReviewRejected,
        #listingObjType,
        ]

        Post_array.append(ROW)

    request_delete_row = {"requests":[{"deleteDimension": {"range": {"sheetId": 0,"dimension": "ROWS","startIndex": 1,"endIndex": 500}}}]}
    service.spreadsheets().batchUpdate(body=request_delete_row, spreadsheetId=SAMPLE_SPREADSHEET_ID).execute()

    sheet.append(spreadsheetId=SAMPLE_SPREADSHEET_ID,range="ANUNCIOS!A2", valueInputOption="RAW", body={"values":Post_array}).execute()
    time.sleep (1)

        
          



###########################################################################################################

def Airbnb_reviews():
    
    SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
    SERVICE_ACCOUNT_FILE = 'credentials.json'

    creds = None
    creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)

    # If modifying these scopes, delete the file token.json.

    # The ID and range of a sample spreadsheet.
    SAMPLE_SPREADSHEET_ID = '1zHh3xX897i68kXQmaPunGT7PGf6_ape3rTmqXiMNPt8'

    service = build('sheets', 'v4', credentials=creds)

    # Call the Sheets API
    sheet = service.spreadsheets().values()
    
    ##################
    
    result_propriedades = sheet.get(spreadsheetId=SAMPLE_SPREADSHEET_ID,range="ANUNCIOS!A2:D").execute()
    values_propriedades = result_propriedades.get('values', [])
    propriedades_list = [item for sublist in values_propriedades for item in sublist]
    time.sleep (0.5)
    
    result_reviews = sheet.get(spreadsheetId=SAMPLE_SPREADSHEET_ID,range="REVIEWS!E2:E").execute()
    values_reviews = result_reviews.get('values', [])
    reviews_list = [item for sublist in values_reviews for item in sublist]
    time.sleep (0.5)
    
    #requests_sort = {"requests": [{"sortRange": {"range": {"sheetId": 296314323,"startRowIndex": 1,"startColumnIndex": 0},"sortSpecs": [{"dataSourceColumnReference": {"name": "D"},"sortOrder": "ASCENDING"}]}}]}
    #Sort = service.spreadsheets().batchUpdate(body=requests_sort, spreadsheetId=SAMPLE_SPREADSHEET_ID).execute()
    #print(Sort)
    #time.sleep (10)
    
    ################# REVIEWS REQUEST
    
    #for a in propriedades_list:
    
    #reviews_append = []
    
    for a in values_propriedades:
        
        print(a)
        
        ID_ANUNCIO = str(a[0])
        APARTAMENTO = a[1]
        NOME_ANUNCIO = a[2]
        
        #ID_ANUNCIO = str(633119241478146804) #miguel bombarda
        Limit = str(50)
        offset = str(0)
        
        COOKIE = "bev=1643884365_YTgwYjRiMDMzNzY3; abb_fa2=%7B%22user_id%22%3A%2262%7C1%7CpQz2tR5sS36c7kUO9ppET3bcui%2BYLp3vi64xhmCs37Na%2FwYnxvp6Mg%3D%3D%22%7D; everest_cookie=1664025056.cGmmxsDJQwOfADQGg3YC.8jwH4zjwOvXciCMjoHh6_zfdPeVZ26YZbaHKi-mnHCw; jitney_client_session_id=e0bbac1b-8aa5-4880-a293-0ae760d8a258; jitney_client_session_created_at=1664186552; bm_sz=B243E3A440215F82C3DFEFED90B92194~YAAQZx0SAhZEUV+DAQAAd5I/eRFVsOvj6kAONG7hMe2SrydL7mKwGNIJI1C3yPc+WNngHqyqN848rIQJT12JQXCDfYEWRxKUmdli8NZwf6oCqzj2phcGWCBIzUDOPaHlHYqnRLMviGLOAKeQlRbXP1iG558E9s9aVvMDp7LYz26nG98tTq8sFWYyuP7J2wCHizkSdshtvDVUQy2TuRg7qid/vqb2f/INB81gFfclSk9rOT5Ocrg5684ICsSNwKNCwLgcRxNFp62aTf0lJkHKafki8MB73BwlwBU31/YsKPhC+g==~3163446~4407864; auth_jitney_session_id=2d319480-eae8-4a53-aa40-8e27848a8d78; _csrf_token=V4%24.airbnb.pt%242MmAu1OXK9U%24-7QyP8sKi5ysK9Frea7gcBMcnnu4MbPbXHiPZbK6Gq4%3D; _aat=0%7CVYkK386nDZ5amvtmk9jb436YYqRHGajBNHEBxvQKPPP4WauKekRsP3DGvnFCWJon; _airbed_session_id=6b8745f87dbb26a39673f06950619ee7; _abck=B6ABC5D4817D32D3713AB96E0B9DCA13~0~YAAQZx0SAtJIUV+DAQAA7WNAeQhuINAtzFrFjLBcCCJFTFT29BT1hxas1pyH3nRw2KLIAx/ffsjey43pt/kRkkv7JKnuYIJ0CBDE1LuUUfTuCcIG+qf0cHPe7YDt4nqNPxIAJPd54yJVHOZR0MKR2kOEAhfohmaAk75RzOi1ulYMkjj63WRjtT/qC33ZXn23dAygS4BjFikNiMzPLp8O33h+lG3+o8IJl/8Elw6lK17lvJu8NXuaILYtoy6AiHozThIN+DCOlwcQRvIIgAMpFTGUDbM6zEIteI70VnYoLR/SXJDWMKqcASI0meHmEuiLIlIeflne0GuVhYluLIIzsF7hVbdcLH8rR6IaZIrw7XUDU/c5KdZKWdnB1GL5OBVL7j1htTkxpzm2SXA=~-1~-1~-1; hli=1; roles=0; cfrmfctr=MOBILE; frmfctr=compact; previousTab=%7B%22id%22%3A%229a48c315-fa6d-4a50-8c03-dcf452ca4c10%22%2C%22url%22%3A%22https%3A%2F%2Fwww.airbnb.pt%2Fhosting%2Finbox%2Ffolder%2Fall%2Fthread%2F1285873637%2Fdetails%22%7D; jitney_client_session_updated_at=1664186651; _user_attributes=%7B%22curr%22%3A%22EUR%22%2C%22guest_exchange%22%3A1.03188%2C%22device_profiling_session_id%22%3A%221659361079--f061de273c42d192a5a2907f%22%2C%22giftcard_profiling_session_id%22%3A%221664186558--7eaaed56f797da0180c67801%22%2C%22reservation_profiling_session_id%22%3A%221664186558--fde1b514743e3f990009abf6%22%2C%22id%22%3A12730028%2C%22hash_user_id%22%3A%2293998f349577ef3ca721456b92b2c9bb41255ac6%22%2C%22eid%22%3A%22VVfHemHC8nXnA-39TZNJiQ%3D%3D%22%2C%22num_h%22%3A208%2C%22num_trip_notif%22%3A0%2C%22name%22%3A%22Host+Wise%22%2C%22num_action%22%3A0%2C%22is_admin%22%3Afalse%2C%22can_access_photography%22%3Afalse%2C%22travel_credit_status%22%3Anull%2C%22referrals_info%22%3A%7B%22receiver_max_savings%22%3Anull%2C%22receiver_savings_percent%22%3Anull%2C%22receiver_signup%22%3Anull%2C%22referrer_guest%22%3A%22%E2%82%AC15%22%2C%22terms_and_conditions_link%22%3A%22%2Fhelp%2Farticle%2F2269%22%2C%22wechat_link%22%3Anull%2C%22offer_discount_type%22%3Anull%7D%7D; flags=1187840"
        
        header = {     
                "path": "/api/v3/ReviewDetailsQuery?operationName=ReviewDetailsQuery&locale=pt-PT&currency=EUR&variables=%7B%22input%22%3A%7B%22revieweeId%22%3A12730028%2C%22reviewId%22%3A%22637550451162268515%22%2C%22role%22%3A%22guest%22%7D%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%222f462b53ce06324e99c484fede4d74fe81412642b0c680df800d504305fdaa3a%22%7D%7D",
                "scheme": "https",
                "accept": "*/*",
                "accept-encoding": "gzip, deflate, br",
                "accept-language": "en-US,en;q=0.9,pt;q=0.8,es;q=0.7",
                "content-type": "application/json",
                "cookie": COOKIE,
                "device-memory": str(8),
                "dpr": str(2),
                "ect": "4g",
                "referer": "https://www.airbnb.pt/performance/quality/cleanliness/reviews/review/637550451162268515",
                "sec-ch-ua": '" Not A;Brand";v="99", "Chromium";v="101", "Google Chrome";v="101"',
                "sec-ch-ua-mobile": "?1",
                "sec-ch-ua-platform": "Android",
                "sec-fetch-dest": "empty",
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "same-origin",
                "user-agent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Mobile Safari/537.36",
                "viewport-width": "885",
                "x-airbnb-api-key": "d306zoyjsyarp7ifhu67rjxn52tv0t20",
                "x-airbnb-graphql-platform": "web",
                "x-airbnb-graphql-platform-client": "airbnb-apollo",
                "x-csrf-token": "V4$.airbnb.pt$9QYe7vfJPlY$bzajVoK8zRxYmXRy8psmav6CLNPucdxV4V2lJjQG_Pw=",
                "x-csrf-without-token": str(1),
                "x-trc-v3-kraken": str(1)
                }
            
        try:
            c = 0
            while c != 200:
                
                ######## REQUEST TO CHECK NUMBER OF REVIEWS
                
                url = "https://pt.airbnb.com/api/v3/PdpReviews?operationName=PdpReviews&locale=pt&currency=EUR&variables=%7B%22request%22%3A%7B%22fieldSelector%22%3A%22for_p3%22%2C%22limit%22%3A"+Limit+"%2C%22listingId%22%3A%22"+ID_ANUNCIO+"%22%2C%22offset%22%3A%22"+offset+"%22%2C%22showingTranslationButton%22%3Atrue%2C%22numberOfAdults%22%3A%221%22%2C%22numberOfChildren%22%3A%220%22%2C%22numberOfInfants%22%3A%220%22%7D%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22ecf7222b1ad7e13da1bf39cf3cf05daa6bbc88709f06ea9cf669deca7e2e2de2%22%7D%7D"
                
                r = requests.get(url, headers = header)
                print(r.status_code)
                print(c)
                c = r.status_code
                print(c)
        
                myObj = r.json()
                
                print(myObj)
                
            Number_Reviews = myObj["data"]["merlin"]["pdpReviews"]["metadata"]["reviewsCount"]
            
            if Number_Reviews == 0:
                continue
            
            if Number_Reviews <= 50:
                offset = [0]
            if Number_Reviews <= 100:
                offset = [0,50]
            if Number_Reviews <= 150:
                offset = [0,50,100]
            if Number_Reviews <= 200:
                offset = [0,50,100,150]
                    
            for o in offset:
                
                ######## REQUEST TO GET THE DATA
                
                url = "https://pt.airbnb.com/api/v3/PdpReviews?operationName=PdpReviews&locale=pt&currency=EUR&variables=%7B%22request%22%3A%7B%22fieldSelector%22%3A%22for_p3%22%2C%22limit%22%3A"+Limit+"%2C%22listingId%22%3A%22"+ID_ANUNCIO+"%22%2C%22offset%22%3A%22"+str(o)+"%22%2C%22showingTranslationButton%22%3Atrue%2C%22numberOfAdults%22%3A%221%22%2C%22numberOfChildren%22%3A%220%22%2C%22numberOfInfants%22%3A%220%22%7D%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22ecf7222b1ad7e13da1bf39cf3cf05daa6bbc88709f06ea9cf669deca7e2e2de2%22%7D%7D"
                
                r = requests.get(url, headers = header)
                print(r.status_code)
                print(c)
                c = r.status_code
                print(c)
        
                myObj = r.json()
                                    
                print(myObj)
                print("Total de reviews - " + str(len(myObj["data"]["merlin"]["pdpReviews"]["reviews"])))
                
                reviews_append = []
                
                for p in range(0,len(myObj["data"]["merlin"]["pdpReviews"]["reviews"])):

                    Review_Date = myObj["data"]["merlin"]["pdpReviews"]["reviews"][p]["createdAt"]
                    Review_ID = myObj["data"]["merlin"]["pdpReviews"]["reviews"][p]["id"]
                    Review_Rating = myObj["data"]["merlin"]["pdpReviews"]["reviews"][p]["rating"]
                    Review_Reviewer_ID = myObj["data"]["merlin"]["pdpReviews"]["reviews"][p]["reviewer"]["id"]
                    Review_Reviewer_Name = myObj["data"]["merlin"]["pdpReviews"]["reviews"][p]["reviewer"]["firstName"]
                    Review_Reviewee_ID = myObj["data"]["merlin"]["pdpReviews"]["reviews"][p]["reviewee"]["id"]
                    Review_Comment = myObj["data"]["merlin"]["pdpReviews"]["reviews"][p]["comments"]
                    Review_Response = myObj["data"]["merlin"]["pdpReviews"]["reviews"][p]["response"]
                    
                    Review_Date_Year = Review_Date.split("-")[0]
                    Review_Date_Month = Review_Date.split("-")[1]
                    Review_Date_Day = Review_Date.split("-")[2].split("T")[0]
                    
                    Parsed_date = Review_Date_Year + Review_Date_Month + Review_Date_Day
                    
                    if Review_ID in reviews_list:
                        print(str(Review_ID) + " - Already in the list")
                        continue 
                    
                    ######## PRIVATE REVIEWS ##############################################
                    
                    URL_PRIVATE = "https://www.airbnb.pt/api/v3/ReviewDetailsQuery?operationName=ReviewDetailsQuery&locale=pt-PT&currency=EUR&variables=%7B%22input%22%3A%7B%22revieweeId%22%3A"+str(Review_Reviewee_ID)+"%2C%22reviewId%22%3A%22"+str(Review_ID)+"%22%2C%22role%22%3A%22guest%22%7D%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%222f462b53ce06324e99c484fede4d74fe81412642b0c680df800d504305fdaa3a%22%7D%7D"
                    r_private = requests.get(URL_PRIVATE, headers = header)
                    myObj_private = r_private.json()
                    
                    time.sleep (0.5)
                    
                    Global = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["rating"]
                    Checkin_value = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["checkin"]
                    Location = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["location"]
                    Value = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["value"]
                    Communication = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["communication"]
                    Cleanliness = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["cleanliness"]
                    Accuracy = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["accuracy"]

                    Private_comment = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["privateFeedback"]
                    if Private_comment != None:
                        Private_comment = Private_comment.replace("\n", "")

                    Checkin = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["reservation"]["checkIn"]
                    Checkout = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["reservation"]["checkOut"]

                    Confirmation_Code = ""
                    if myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["reservation"]["confirmationCode"] != None:
                        Confirmation_Code = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["reservation"]["confirmationCode"]
                    
                    Response = "No reply by the host"
                    if myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["response"] != None:
                        Response = myObj_private["data"]["porygon"]["getReviews"]["reviews"][0]["response"]
                        Response = Response.replace("\n", "")

                
                    
                    
                    row = [
                    ID_ANUNCIO,
                    APARTAMENTO,
                    NOME_ANUNCIO,
                    #Anuncio_Tabela_Proprietarios,
                    Review_Date,
                    Review_ID,
                    Review_Rating,
                    Review_Reviewee_ID,
                    Review_Reviewer_Name,
                    Review_Reviewer_ID,
                    Review_Comment,
                    Global,
                    Checkin_value,
                    Location,
                    Value,
                    Communication,
                    Cleanliness,
                    Accuracy,
                    Private_comment,
                    Checkin,
                    Checkout,
                    Confirmation_Code,
                    Response,
                    int(Parsed_date),
                    int(Review_Date_Year),
                    int(Review_Date_Month),
                    int(Review_Date_Day)
                    ]

                    print("New Review - " + Review_ID + " - " + Review_Date)
                    reviews_append.append(row)
                
                sheet.append(spreadsheetId=SAMPLE_SPREADSHEET_ID,range="REVIEWS!A2", valueInputOption="RAW", body={"values":reviews_append}).execute()
                time.sleep (1)
                
        except Exception as e:
            print("ERROR TO CONNECT")
            print(e) 
                
    #sheet.append(spreadsheetId=SAMPLE_SPREADSHEET_ID,range="REVIEWS!A2", valueInputOption="RAW", body={"values":reviews_append}).execute()
    
                
                
############################ FUNCTIONS                
                
#Airbnb_anuncios()                       
Airbnb_reviews()

